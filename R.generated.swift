//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 17 storyboards.
  struct storyboard {
    /// Storyboard `AppStoreDetail`.
    static let appStoreDetail = _R.storyboard.appStoreDetail()
    /// Storyboard `AppStoreTop`.
    static let appStoreTop = _R.storyboard.appStoreTop()
    /// Storyboard `DummyCollection`.
    static let dummyCollection = _R.storyboard.dummyCollection()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MosaicCollection`.
    static let mosaicCollection = _R.storyboard.mosaicCollection()
    /// Storyboard `Sample1Collection`.
    static let sample1Collection = _R.storyboard.sample1Collection()
    /// Storyboard `Sample2Collection`.
    static let sample2Collection = _R.storyboard.sample2Collection()
    /// Storyboard `Sample3Collection`.
    static let sample3Collection = _R.storyboard.sample3Collection()
    /// Storyboard `Sample4Collection`.
    static let sample4Collection = _R.storyboard.sample4Collection()
    /// Storyboard `Sample5Collection`.
    static let sample5Collection = _R.storyboard.sample5Collection()
    /// Storyboard `Sample6Collection`.
    static let sample6Collection = _R.storyboard.sample6Collection()
    /// Storyboard `SampleCollection7`.
    static let sampleCollection7 = _R.storyboard.sampleCollection7()
    /// Storyboard `StoppableHeaderCollection`.
    static let stoppableHeaderCollection = _R.storyboard.stoppableHeaderCollection()
    /// Storyboard `StoppableHeaderPageCollection`.
    static let stoppableHeaderPageCollection = _R.storyboard.stoppableHeaderPageCollection()
    /// Storyboard `SwiftUICellCollection`.
    static let swiftUICellCollection = _R.storyboard.swiftUICellCollection()
    /// Storyboard `VHScrollCollection`.
    static let vhScrollCollection = _R.storyboard.vhScrollCollection()
    /// Storyboard `WaterfallLayoutCollection`.
    static let waterfallLayoutCollection = _R.storyboard.waterfallLayoutCollection()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AppStoreDetail", bundle: ...)`
    static func appStoreDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.appStoreDetail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AppStoreTop", bundle: ...)`
    static func appStoreTop(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.appStoreTop)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DummyCollection", bundle: ...)`
    static func dummyCollection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dummyCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MosaicCollection", bundle: ...)`
    static func mosaicCollection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mosaicCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sample1Collection", bundle: ...)`
    static func sample1Collection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sample1Collection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sample2Collection", bundle: ...)`
    static func sample2Collection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sample2Collection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sample3Collection", bundle: ...)`
    static func sample3Collection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sample3Collection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sample4Collection", bundle: ...)`
    static func sample4Collection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sample4Collection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sample5Collection", bundle: ...)`
    static func sample5Collection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sample5Collection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sample6Collection", bundle: ...)`
    static func sample6Collection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sample6Collection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SampleCollection7", bundle: ...)`
    static func sampleCollection7(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sampleCollection7)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "StoppableHeaderCollection", bundle: ...)`
    static func stoppableHeaderCollection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.stoppableHeaderCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "StoppableHeaderPageCollection", bundle: ...)`
    static func stoppableHeaderPageCollection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.stoppableHeaderPageCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SwiftUICellCollection", bundle: ...)`
    static func swiftUICellCollection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.swiftUICellCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "VHScrollCollection", bundle: ...)`
    static func vhScrollCollection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.vhScrollCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "WaterfallLayoutCollection", bundle: ...)`
    static func waterfallLayoutCollection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.waterfallLayoutCollection)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `AppStoreFullImageView`.
    static let appStoreFullImageView = _R.nib._AppStoreFullImageView()
    /// Nib `MyCollectionViewCell2`.
    static let myCollectionViewCell2 = _R.nib._MyCollectionViewCell2()
    /// Nib `MyCollectionViewCell3`.
    static let myCollectionViewCell3 = _R.nib._MyCollectionViewCell3()
    /// Nib `MyCollectionViewCell`.
    static let myCollectionViewCell = _R.nib._MyCollectionViewCell()
    /// Nib `UICollectionViewCell02`.
    static let uiCollectionViewCell02 = _R.nib._UICollectionViewCell02()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AppStoreFullImageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.appStoreFullImageView) instead")
    static func appStoreFullImageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appStoreFullImageView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myCollectionViewCell) instead")
    static func myCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyCollectionViewCell2", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myCollectionViewCell2) instead")
    static func myCollectionViewCell2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCollectionViewCell2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyCollectionViewCell3", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myCollectionViewCell3) instead")
    static func myCollectionViewCell3(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCollectionViewCell3)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UICollectionViewCell02", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.uiCollectionViewCell02) instead")
    static func uiCollectionViewCell02(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.uiCollectionViewCell02)
    }
    #endif

    static func appStoreFullImageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppStoreFullImageView? {
      return R.nib.appStoreFullImageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppStoreFullImageView
    }

    static func myCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCollectionViewCell? {
      return R.nib.myCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCollectionViewCell
    }

    static func myCollectionViewCell2(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCollectionViewCell2? {
      return R.nib.myCollectionViewCell2.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCollectionViewCell2
    }

    static func myCollectionViewCell3(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCollectionViewCell3? {
      return R.nib.myCollectionViewCell3.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCollectionViewCell3
    }

    static func uiCollectionViewCell02(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollectionViewCell02? {
      return R.nib.uiCollectionViewCell02.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollectionViewCell02
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AppStoreFullImageView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AppStoreFullImageView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppStoreFullImageView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppStoreFullImageView
      }

      fileprivate init() {}
    }

    struct _MyCollectionViewCell2: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyCollectionViewCell2"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCollectionViewCell2? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCollectionViewCell2
      }

      fileprivate init() {}
    }

    struct _MyCollectionViewCell3: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyCollectionViewCell3"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCollectionViewCell3? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCollectionViewCell3
      }

      fileprivate init() {}
    }

    struct _MyCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _UICollectionViewCell02: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UICollectionViewCell02"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollectionViewCell02? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollectionViewCell02
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try appStoreDetail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try appStoreTop.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try dummyCollection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mosaicCollection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sample1Collection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sample2Collection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sample3Collection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sample4Collection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sample5Collection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sample6Collection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sampleCollection7.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try stoppableHeaderCollection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try stoppableHeaderPageCollection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try swiftUICellCollection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try vhScrollCollection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try waterfallLayoutCollection.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct appStoreDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AppStoreDetailViewController

      let appStoreDetailViewController = StoryboardViewControllerResource<AppStoreDetailViewController>(identifier: "AppStoreDetailViewController")
      let bundle = R.hostingBundle
      let name = "AppStoreDetail"

      func appStoreDetailViewController(_: Void = ()) -> AppStoreDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: appStoreDetailViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.appStoreDetail().appStoreDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'appStoreDetailViewController' could not be loaded from storyboard 'AppStoreDetail' as 'AppStoreDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct appStoreTop: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AppStoreTopViewController

      let appStoreTopViewController = StoryboardViewControllerResource<AppStoreTopViewController>(identifier: "AppStoreTopViewController")
      let bundle = R.hostingBundle
      let name = "AppStoreTop"

      func appStoreTopViewController(_: Void = ()) -> AppStoreTopViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: appStoreTopViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.appStoreTop().appStoreTopViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'appStoreTopViewController' could not be loaded from storyboard 'AppStoreTop' as 'AppStoreTopViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct dummyCollection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DummyCollectionViewController

      let bundle = R.hostingBundle
      let name = "DummyCollection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mosaicCollection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MosaicCollectionViewController

      let bundle = R.hostingBundle
      let name = "MosaicCollection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sample1Collection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = Sample1CollectionViewController

      let bundle = R.hostingBundle
      let name = "Sample1Collection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sample2Collection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = Sample2CollectionViewController

      let bundle = R.hostingBundle
      let name = "Sample2Collection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sample3Collection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = Sample3CollectionViewController

      let bundle = R.hostingBundle
      let name = "Sample3Collection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sample4Collection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = Sample4CollectionViewController

      let bundle = R.hostingBundle
      let name = "Sample4Collection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sample5Collection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = Sample5CollectionViewController

      let bundle = R.hostingBundle
      let name = "Sample5Collection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sample6Collection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = Sample6CollectionViewController

      let bundle = R.hostingBundle
      let name = "Sample6Collection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sampleCollection7: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SampleCollection7ViewController

      let bundle = R.hostingBundle
      let name = "SampleCollection7"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct stoppableHeaderCollection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = StoppableHeaderCollectionViewController

      let bundle = R.hostingBundle
      let name = "StoppableHeaderCollection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct stoppableHeaderPageCollection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = StoppableHeaderPageCollectionViewController

      let bundle = R.hostingBundle
      let name = "StoppableHeaderPageCollection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct swiftUICellCollection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SwiftUICellCollectionViewController

      let bundle = R.hostingBundle
      let name = "SwiftUICellCollection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct vhScrollCollection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = VHScrollCollectionViewController

      let bundle = R.hostingBundle
      let name = "VHScrollCollection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct waterfallLayoutCollection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WaterfallLayoutCollectionViewController

      let bundle = R.hostingBundle
      let name = "WaterfallLayoutCollection"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
